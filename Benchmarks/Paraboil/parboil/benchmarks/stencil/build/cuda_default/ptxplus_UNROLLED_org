//HEADER
.version 1.4+
.target sm_10, map_f64_to_f32
//END HEADER


//INSTRUCTIONS

.const .u32 constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[6] = {
          0x000003ff, 0x00000001, 0xfffffffc, 0xffffffff, 
          0x00000004, 0x00000000
};





.entry  _Z24block2D_hybrid_coarsen_xffPfS_iii (
	.param  .f32 __cudaparm__Z24block2D_hybrid_coarsen_xffPfS_iii_c0 ,
	.param  .f32 __cudaparm__Z24block2D_hybrid_coarsen_xffPfS_iii_c1 ,
	.param  .u64 __cudaparm__Z24block2D_hybrid_coarsen_xffPfS_iii_A0 ,
	.param  .u64 __cudaparm__Z24block2D_hybrid_coarsen_xffPfS_iii_Anext ,
	.param  .s32 __cudaparm__Z24block2D_hybrid_coarsen_xffPfS_iii_nx ,
	.param  .s32 __cudaparm__Z24block2D_hybrid_coarsen_xffPfS_iii_ny ,
	.param  .s32 __cudaparm__Z24block2D_hybrid_coarsen_xffPfS_iii_nz )
{
	.reg .u32 $r<22>;
	.reg .u32 $ofs<3>;
	.reg .pred $p<4>;

	.reg .u32 $r124;

	.reg .u32 $o127;

	
	and.u16 $r0.hi, $r0.hi, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0000];
	cvt.u32.u16 $r2, %ntid.x;
	cvt.u32.u16 $r3, $r0.hi;
	mul.wide.u16 $r1, $r2.lo, $r3.lo;
	cvt.u32.u16 $r18, $r0.lo;
	shl.u32 $r0, $r1, 0x00000001;
	add.half.u32 $r15, $r2, $r18;
	add.half.u32 $r6, $r18, $r0;
	add.u32 $r7, $r0, $r15;
	shl.b32 $ofs1, $r6, 0x00000002;
	shl.b32 $ofs2, $r7, 0x00000002;
	mov.u32 s[$ofs1+0x0040], $r124;
	mov.u32 s[$ofs2+0x0040], $r124;
	bar.sync 0x00000000;
	mul.wide.u16 $r0, %ctaid.x, $r2.hi;
	shl.u32 $r0, $r0, 0x00000010;
	cvt.u32.u16 $r4, %ntid.y;
	mad.wide.u16 $r0, %ctaid.x, $r2.lo, $r0;
	mul.wide.u16 $r1, %ctaid.y, $r4.lo;
	shl.u32 $r0, $r0, 0x00000001;
	add.half.u32 $r1, $r1, $r3;
	add.half.u32 $r8, $r0, $r18;
	set.gt.s32.s32 $r5, s[0x002c], $r1;
	set.gt.s32.s32 $r0, s[0x0028], $r8;
	and.b32 $r11, $r5, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	and.b32 $r0, $r0, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	and.b32 $p0|$r9, $r11, $r0;
	ssy 0x00000170;
	@$p0.eq bra l0x00000168;
	mov.half.u32 $r0, s[0x0028];
	add.half.u32 $r5, s[0x002c], $r1;
	mul.half.lo.u16 $r12, $r0.lo, $r5.hi;
	mul.half.lo.u16 $r10, $r1.hi, $r0.lo;
	mad.wide.u16 $r12, $r0.hi, $r5.lo, $r12;
	mad.wide.u16 $r10, $r1.lo, $r0.hi, $r10;
	shl.u32 $r12, $r12, 0x00000010;
	shl.u32 $r10, $r10, 0x00000010;
	mad.wide.u16 $r5, $r0.lo, $r5.lo, $r12;
	mad.wide.u16 $r0, $r1.lo, $r0.lo, $r10;
	add.half.u32 $r5, $r8, $r5;
	add.half.u32 $r0, $r0, $r8;
	shl.u32 $r5, $r5, 0x00000002;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r5, s[0x0018], $r5;
	ld.global.u32 $r5, [$r5];
	shl.b32 $ofs1, $r6, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r19, [$r0];
	mov.u32 s[$ofs1+0x0040], $r5;
	bra l0x00000170;
	l0x00000168: mov.u32 $r19, $r124;
	l0x00000170: add.u32 $r10, $r8, $r2;
	set.gt.s32.s32 $r0, s[0x0028], $r10;
	and.b32 $r0, $r0, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	and.b32 $p0|$r11, $r11, $r0;
	ssy 0x00000238;
	@$p0.eq bra l0x00000230;
	mov.half.u32 $r0, s[0x0028];
	add.half.u32 $r5, s[0x002c], $r1;
	mul.half.lo.u16 $r13, $r0.lo, $r5.hi;
	mul.half.lo.u16 $r12, $r1.hi, $r0.lo;
	mad.wide.u16 $r13, $r0.hi, $r5.lo, $r13;
	mad.wide.u16 $r12, $r1.lo, $r0.hi, $r12;
	shl.u32 $r13, $r13, 0x00000010;
	shl.u32 $r12, $r12, 0x00000010;
	mad.wide.u16 $r5, $r0.lo, $r5.lo, $r13;
	mad.wide.u16 $r0, $r1.lo, $r0.lo, $r12;
	add.half.u32 $r5, $r10, $r5;
	add.half.u32 $r0, $r0, $r10;
	shl.u32 $r5, $r5, 0x00000002;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r5, s[0x0018], $r5;
	ld.global.u32 $r5, [$r5];
	shl.b32 $ofs1, $r7, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r20, [$r0];
	mov.u32 s[$ofs1+0x0040], $r5;
	bra l0x00000238;
	l0x00000230: mov.u32 $r20, $r124;
	l0x00000238: nop;
	bar.sync 0x00000000;
	add.u32 $r5, s[0x0030], 0xffffffff;
	set.le.s32.s32 $p0/$o127, $r5, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	@$p0.ne retp;
	add.u32 $r4, $r4, 0xffffffff;
	add.u32 $r0, s[0x0028], 0xffffffff;
	set.eq.u32.u32 $p1/$o127, $r3, $r124;
	set.eq.u32.u32 $p0/$o127, $r4, $r3;
	set.gt.s32.s32 $r12, $r1, $r124;
	set.gt.s32.s32 $r4, $r0, $r10;
	set.gt.s32.s32 $r3, $r8, $r124;
	and.b32 $r13, $r12, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	and.b32 $r12, $r4, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	and.b32 $r4, $r3, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	and.b32 $r3, $r13, $r12;
	and.b32 $r4, $r13, $r4;
	add.u32 $r12, s[0x002c], 0xffffffff;
	set.gt.s32.s32 $r0, $r0, $r8;
	set.gt.s32.s32 $r13, $r12, $r1;
	and.b32 $r0, $r0, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	shl.u32 $r12, $r2, 0x00000001;
	and.b32 $r2, $r13, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0004];
	and.b32 $r0, $r0, $r4;
	add.u32 $r4, $r12, 0xffffffff;
	and.b32 $r13, $r2, $r3;
	and.b32 $r14, $r2, $r0;
	set.eq.u32.u32 $p3/$o127, $r15, $r4;
	@$p3 mov.u32 $r15, $p3;
	mov.u32 $r17, $r124;
	mov.u32 $r16, $r124;
	mov.u32 $r2, 0x00000001;
	set.eq.u32.u32 $p2/$o127, $r18, $r124;
	l0x00000340: ssy 0x000003d8;
	set.eq.s32.s32 $p3/$o127, $r9, $r124;
	@$p3.ne bra l0x000003d8;
	add.u32 $r3, $r2, 0x00000001;
	mov.u32 $r0, s[0x002c];
	mul.wide.u16 $r4, $r0.lo, $r3.hi;
	mad.wide.u16 $r4, $r0.hi, $r3.lo, $r4;
	shl.u32 $r4, $r4, 0x00000010;
	mad.wide.u16 $r3, $r0.lo, $r3.lo, $r4;
	mov.u32 $r0, s[0x0028];
	add.u32 $r3, $r3, $r1;
	mul.wide.u16 $r4, $r0.lo, $r3.hi;
	mad.wide.u16 $r4, $r0.hi, $r3.lo, $r4;
	shl.u32 $r4, $r4, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r3.lo, $r4;
	add.u32 $r0, $r0, $r8;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r16, [$r0];
	l0x000003d8: nop;
	ssy 0x000005d8;
	set.eq.s32.s32 $p3/$o127, $r14, $r124;
	@$p3.ne bra l0x000005d8;
	mov.u32 $r0, s[0x002c];
	mul.wide.u16 $r3, $r2.lo, $r0.hi;
	mad.wide.u16 $r3, $r2.hi, $r0.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r0, $r2.lo, $r0.lo, $r3;
	ssy 0x000004a8;
	add.u32 $r3, $r0, $r1;
	@$p0.eq bra l0x00000490;
	add.u32 $r4, $r3, 0x00000001;
	mov.u32 $r0, s[0x0028];
	mul.wide.u16 $r18, $r0.lo, $r4.hi;
	mad.wide.u16 $r18, $r0.hi, $r4.lo, $r18;
	shl.u32 $r18, $r18, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r4.lo, $r18;
	add.u32 $r0, $r0, $r8;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r18, [$r0];
	bra l0x000004a8;
	l0x00000490: add.u32 $r0, $r12, $r6;
	shl.b32 $ofs1, $r0, 0x00000002;
	mov.u32 $r18, s[$ofs1+0x0040];
	l0x000004a8: nop;
	ssy 0x00000530;
	@$p1.eq bra l0x00000518;
	add.u32 $r4, $r3, 0xffffffff;
	mov.u32 $r0, s[0x0028];
	mul.wide.u16 $r21, $r0.lo, $r4.hi;
	mad.wide.u16 $r21, $r0.hi, $r4.lo, $r21;
	shl.u32 $r21, $r21, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r4.lo, $r21;
	add.u32 $r0, $r0, $r8;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r4, [$r0];
	bra l0x00000530;
	l0x00000518: add.u32 $r0, $r6, -$r12;
	shl.b32 $ofs1, $r0, 0x00000002;
	mov.u32 $r4, s[$ofs1+0x0040];
	l0x00000530: mov.u32 $r0, s[0x0028];
	mul.wide.u16 $r21, $r3.lo, $r0.hi;
	mad.wide.u16 $r21, $r3.hi, $r0.lo, $r21;
	shl.u32 $r21, $r21, 0x00000010;
	mad.wide.u16 $r0, $r3.lo, $r0.lo, $r21;
	add.u32 $r0, $r0, $r8;
	shl.u32 $r3, $r0, 0x00000002;
	@$p2.neu add.u32 $r0, s[0x0018], $r3;
	@$p2.neu add.u32 $r0, $r0, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0008];
	@$p2.neu ld.global.u32 $r0, [$r0];
	@$p2.eq shl.b32 $ofs1, $r6, 0x00000002;
	@$p2.eq mov.u32 $r0, s[$ofs1+0x003c];
	add.half.f32 $r19, $r16, $r19;
	add.half.f32 $r18, $r18, $r19;
	add.f32 $r4, $r4, $r18;
	shl.b32 $ofs1, $r6, 0x00000002;
	add.f32 $r4, s[$ofs1+0x0044], $r4;
	add.half.f32 $r4, $r0, $r4;
	mov.half.u32 $r0, s[0x0010];
	mul.f32 $r0, s[$ofs1+0x0040], $r0;
	mad.f32 $r0, s[0x0014], $r4, -$r0;
	add.u32 $r3, s[0x0020], $r3;
	st.global.u32 [$r3], $r0;
	l0x000005d8: nop;
	ssy 0x00000678;
	set.eq.s32.s32 $p3/$o127, $r11, $r124;
	@$p3.ne bra l0x00000678;
	add.u32 $r3, $r2, 0x00000001;
	mov.u32 $r0, s[0x002c];
	mul.wide.u16 $r4, $r0.lo, $r3.hi;
	mad.wide.u16 $r4, $r0.hi, $r3.lo, $r4;
	shl.u32 $r4, $r4, 0x00000010;
	mad.wide.u16 $r3, $r0.lo, $r3.lo, $r4;
	mov.u32 $r0, s[0x0028];
	add.u32 $r3, $r3, $r1;
	mul.wide.u16 $r4, $r0.lo, $r3.hi;
	mad.wide.u16 $r4, $r0.hi, $r3.lo, $r4;
	shl.u32 $r4, $r4, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r3.lo, $r4;
	add.u32 $r0, $r0, $r10;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r17, [$r0];
	l0x00000678: nop;
	ssy 0x00000880;
	set.eq.s32.s32 $p3/$o127, $r13, $r124;
	@$p3.ne bra l0x00000880;
	mov.u32 $r0, s[0x002c];
	mul.wide.u16 $r3, $r2.lo, $r0.hi;
	mad.wide.u16 $r3, $r2.hi, $r0.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r0, $r2.lo, $r0.lo, $r3;
	ssy 0x00000748;
	add.u32 $r3, $r0, $r1;
	@$p0.eq bra l0x00000730;
	add.u32 $r4, $r3, 0x00000001;
	mov.u32 $r0, s[0x0028];
	mul.wide.u16 $r18, $r0.lo, $r4.hi;
	mad.wide.u16 $r18, $r0.hi, $r4.lo, $r18;
	shl.u32 $r18, $r18, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r4.lo, $r18;
	add.u32 $r0, $r0, $r10;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r18, [$r0];
	bra l0x00000748;
	l0x00000730: add.u32 $r0, $r12, $r7;
	shl.b32 $ofs1, $r0, 0x00000002;
	mov.u32 $r18, s[$ofs1+0x0040];
	l0x00000748: nop;
	ssy 0x000007d0;
	@$p1.eq bra l0x000007b8;
	add.u32 $r4, $r3, 0xffffffff;
	mov.u32 $r0, s[0x0028];
	mul.wide.u16 $r19, $r0.lo, $r4.hi;
	mad.wide.u16 $r19, $r0.hi, $r4.lo, $r19;
	shl.u32 $r19, $r19, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r4.lo, $r19;
	add.u32 $r0, $r0, $r10;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, s[0x0018], $r0;
	ld.global.u32 $r4, [$r0];
	bra l0x000007d0;
	l0x000007b8: add.u32 $r0, $r7, -$r12;
	shl.b32 $ofs1, $r0, 0x00000002;
	mov.u32 $r4, s[$ofs1+0x0040];
	l0x000007d0: mov.u32 $r0, s[0x0028];
	mul.wide.u16 $r19, $r3.lo, $r0.hi;
	mad.wide.u16 $r19, $r3.hi, $r0.lo, $r19;
	shl.u32 $r19, $r19, 0x00000010;
	mad.wide.u16 $r0, $r3.lo, $r0.lo, $r19;
	add.u32 $r0, $r0, $r10;
	shl.u32 $r3, $r0, 0x00000002;
	mov.pred $p3, $r15;
	@$p3.neu add.u32 $r0, s[0x0018], $r3;
	@$p3.neu add.u32 $r0, $r0, constant1_Z24block2D_hybrid_coarsen_xffPfS_iii[0x0010];
	@$p3.neu ld.global.u32 $r0, [$r0];
	@$p3.eq shl.b32 $ofs1, $r7, 0x00000002;
	@$p3.eq mov.u32 $r0, s[$ofs1+0x0044];
	add.half.f32 $r19, $r17, $r20;
	add.half.f32 $r18, $r18, $r19;
	add.half.f32 $r4, $r4, $r18;
	add.half.f32 $r4, $r0, $r4;
	shl.b32 $ofs1, $r7, 0x00000002;
	mov.u32 $r0, s[0x0010];
	mul.f32 $r18, s[$ofs1+0x0040], $r0;
	add.f32 $r0, s[$ofs1+0x003c], $r4;
	mad.f32 $r0, s[0x0014], $r0, -$r18;
	add.u32 $r3, s[0x0020], $r3;
	st.global.u32 [$r3], $r0;
	l0x00000880: nop;
	bar.sync 0x00000000;
	shl.b32 $ofs1, $r6, 0x00000002;
	mov.u32 $r19, s[$ofs1+0x0040];
	shl.b32 $ofs2, $r7, 0x00000002;
	mov.u32 s[$ofs1+0x0040], $r16;
	mov.u32 $r20, s[$ofs2+0x0040];
	mov.u32 s[$ofs2+0x0040], $r17;
	bar.sync 0x00000000;
	add.u32 $r2, $r2, 0x00000001;
	set.ne.s32.s32 $p3/$o127, $r5, $r2;
	@$p3.ne bra l0x00000340;
	nop;

	l_exit: exit;
}
//END INSTRUCTIONS
