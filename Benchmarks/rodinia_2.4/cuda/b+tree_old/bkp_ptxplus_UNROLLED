//HEADER
.version 1.4+
.target sm_13
//END HEADER


//INSTRUCTIONS

.const .u32 constant1findRangeK[3] = {
          0x00000001, 0x00000004, 0x00000000
};





.entry  findRangeK (
	.param  .s64 __cudaparm_findRangeK_height ,
	.param  .u64 __cudaparm_findRangeK_knodesD ,
	.param  .s64 __cudaparm_findRangeK_knodes_elem ,
	.param  .u64 __cudaparm_findRangeK_currKnodeD ,
	.param  .u64 __cudaparm_findRangeK_offsetD ,
	.param  .u64 __cudaparm_findRangeK_lastKnodeD ,
	.param  .u64 __cudaparm_findRangeK_offset_2D ,
	.param  .u64 __cudaparm_findRangeK_startD ,
	.param  .u64 __cudaparm_findRangeK_endD ,
	.param  .u64 __cudaparm_findRangeK_RecstartD ,
	.param  .u64 __cudaparm_findRangeK_ReclenD )
{


	.reg .pred $p0;		
	.reg .u32 $o127;	
	.reg .u32 $r124;	
	.reg .u32 $r1;
	.reg .u32 $r2;	
	.reg .u32 $r3;		
	.reg .u32 $r0;
	.reg .u32 $r11;	
	.reg .u32 $r13;
	.reg .u32 $r4;		
	.reg .u32 $r12;
	.reg .u32 $r5;	
	.reg .u32 $r10;		
	.reg .u32 $r9;
	.reg .u32 $r8;	
	.reg .u32 $r7;
	.reg .u32 $r6;
	.reg .pred $p1;	
	
	set.eq.s32.s32 $p0/$o127, s[0x0014], $r124;
	@$p0.ne set.le.u32.u32 $p0/$o127, s[0x0010], $r124;
	cvt.u32.u16 $r1, %ctaid.x;
	@$p0.eq set.lt.s32.s32 $p0/$o127, s[0x0014], $r124;
	mov.half.u32 $r2, s[0x0010];
	mov.half.u32 $r3, s[0x0014];
	cvt.u32.u16 $r0, $r0.lo;
	@$p0.ne bra l0x000002a0;
	set.eq.s32.s32 $p0/$o127, $r0, $r124;
	shl.u32 $r11, $r0, 0x00000002;
	shl.u32 $r13, $r1, 0x00000002;
	mov.u32 $r4, $r124;
	shl.u32 $r12, $r1, 0x00000003;
	mov.u32 $r5, $r124;
	add.u32 $r10, s[0x0048], $r13;
	add.u32 $r9, s[0x0050], $r13;
	add.half.u32 $r8, s[0x0028], $r12;
	add.half.u32 $r7, s[0x0038], $r12;
	l0x00000080: ld.global.v2.u32 {$r0,$r1}, [$r8];
	mov.u32 $r6, 0x00000ff4;
	mul.wide.u16 $r1, $r0.lo, $r6.hi;
	mad.wide.u16 $r1, $r0.hi, $r6.lo, $r1;
	shl.u32 $r1, $r1, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r6.lo, $r1;
	add.half.u32 $r0, s[0x0018], $r0;
	add.half.u32 $r0, $r11, $r0;
	add.u32 $r6, $r0, 0x000007f8;
	ld.global.u32 $r1, [$r10];
	ld.global.u32 $r6, [$r6];
	set.gt.s32.s32 $p1/$o127, $r6, $r1;
	ssy 0x00000148;
	@$p1.ne bra l0x00000148;
	add.u32 $r6, $r0, 0x000007fc;
	ld.global.u32 $r6, [$r6];
	set.le.s32.s32 $p1/$o127, $r6, $r1;
	@$p1.ne bra l0x00000148;
	add.u32 $r0, $r0, 0x00000004;
	ld.global.u32 $r0, [$r0];
	shr.s32 $r1, $r0, 0x0000001f;
	set.eq.s32.s32 $p1/$o127, s[0x0024], $r1;
	@$p1.ne set.le.u32.u32 $p1/$o127, s[0x0020], $r0;
	@$p1.eq set.lt.s32.s32 $p1/$o127, s[0x0024], $r1;
	@$p1.equ add.u32 $r6, s[0x0030], $r12;
	@$p1.equ st.global.v2.u32 [$r6], {$r0,$r1};
	l0x00000148: nop;
	ld.global.v2.u32 {$r0,$r1}, [$r7];
	mov.u32 $r6, 0x00000ff4;
	mul.wide.u16 $r1, $r0.lo, $r6.hi;
	mad.wide.u16 $r1, $r0.hi, $r6.lo, $r1;
	shl.u32 $r1, $r1, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r6.lo, $r1;
	add.half.u32 $r0, s[0x0018], $r0;
	add.half.u32 $r0, $r11, $r0;
	add.u32 $r6, $r0, 0x000007f8;
	ld.global.u32 $r1, [$r9];
	ld.global.u32 $r6, [$r6];
	set.gt.s32.s32 $p1/$o127, $r6, $r1;
	ssy 0x00000218;
	@$p1.ne bra l0x00000218;
	add.u32 $r6, $r0, 0x000007fc;
	ld.global.u32 $r6, [$r6];
	set.le.s32.s32 $p1/$o127, $r6, $r1;
	@$p1.ne bra l0x00000218;
	add.u32 $r0, $r0, 0x00000004;
	ld.global.u32 $r0, [$r0];
	shr.s32 $r1, $r0, 0x0000001f;
	set.eq.s32.s32 $p1/$o127, s[0x0024], $r1;
	@$p1.ne set.le.u32.u32 $p1/$o127, s[0x0020], $r0;
	@$p1.eq set.lt.s32.s32 $p1/$o127, s[0x0024], $r1;
	@$p1.equ add.u32 $r6, s[0x0040], $r12;
	@$p1.equ st.global.v2.u32 [$r6], {$r0,$r1};
	l0x00000218: nop;
	bar.sync 0x00000000;
	@$p0.neu add.u32 $r6, s[0x0030], $r12;
	@$p0.neu ld.global.v2.u32 {$r0,$r1}, [$r6];
	@$p0.neu st.global.v2.u32 [$r8], {$r0,$r1};
	@$p0.neu add.u32 $r6, s[0x0040], $r12;
	@$p0.neu ld.global.v2.u32 {$r0,$r1}, [$r6];
	@$p0.neu st.global.v2.u32 [$r7], {$r0,$r1};
	bar.sync 0x00000000;
	add.u32 $p1|$r4, $r4, constant1findRangeK[0x0000];
	addp.u32 $r0, $r5, $r124, $p1;
	set.eq.s32.s32 $p1/$o127, $r0, $r3;
	@$p1.ne set.lt.u32.u32 $p1/$o127, $r4, $r2;
	@$p1.eq set.lt.s32.s32 $p1/$o127, $r0, $r3;
	mov.u32 $r5, $r0;
	@$p1.ne bra l0x00000080;
	bra l0x000002d0;
	l0x000002a0: shl.u32 $r13, $r1, 0x00000002;
	shl.u32 $r1, $r1, 0x00000003;
	shl.u32 $r11, $r0, 0x00000002;
	add.u32 $r10, s[0x0048], $r13;
	add.u32 $r9, s[0x0050], $r13;
	add.half.u32 $r8, s[0x0028], $r1;
	add.half.u32 $r7, s[0x0038], $r1;
	l0x000002d0: ld.global.v2.u32 {$r0,$r1}, [$r8];
	mov.u32 $r2, 0x00000ff4;
	mul.wide.u16 $r1, $r0.lo, $r2.hi;
	mad.wide.u16 $r1, $r0.hi, $r2.lo, $r1;
	shl.u32 $r1, $r1, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r2.lo, $r1;
	add.half.u32 $r0, s[0x0018], $r0;
	add.half.u32 $r0, $r11, $r0;
	add.u32 $r1, $r0, 0x000007f8;
	ld.global.u32 $r2, [$r10];
	ld.global.u32 $r1, [$r1];
	set.ne.s32.s32 $p0/$o127, $r2, $r1;
	@$p0.equ add.u32 $r0, $r0, constant1findRangeK[0x0004];
	@$p0.equ add.u32 $r1, s[0x0058], $r13;
	@$p0.equ ld.global.u32 $r0, [$r0];
	@$p0.equ st.global.u32 [$r1], $r0;
	bar.sync 0x00000000;
	ld.global.v2.u32 {$r0,$r1}, [$r7];
	mov.u32 $r2, 0x00000ff4;
	mul.wide.u16 $r1, $r0.lo, $r2.hi;
	mad.wide.u16 $r1, $r0.hi, $r2.lo, $r1;
	shl.u32 $r1, $r1, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r2.lo, $r1;
	add.half.u32 $r0, s[0x0018], $r0;
	add.half.u32 $r0, $r11, $r0;
	add.u32 $r1, $r0, 0x000007f8;
	ld.global.u32 $r2, [$r9];
	ld.global.u32 $r1, [$r1];
	set.ne.s32.s32 $p0/$o127, $r2, $r1;
	@$p0.ne retp;
	add.u32 $r1, $r0, 0x00000004;
	add.u32 $r0, s[0x0058], $r13;
	ld.global.u32 $r1, [$r1];
	ld.global.u32 $r0, [$r0];
	add.u32 $r1, $r1, -$r0;
	add.u32 $r0, s[0x0060], $r13;
	add.u32 $r1, $r1, 0x00000001;
	st.global.u32 [$r0], $r1;

	l_exit: exit;
}
//END INSTRUCTIONS
