//HEADER
.version 1.4+
.target sm_13
//END HEADER


//INSTRUCTIONS

.const .u32 constant1_Z12lud_diagonalPfii[1] = {
          0x0000000f
};

.const .u32 constant1_Z13lud_perimeterPfii[2] = {
          0x0000000f, 0x00000010
};

.const .u32 constant1_Z12lud_internalPfii[2] = {
          0x000003ff, 0x00000010
};





.entry  _Z12lud_internalPfii (
	.param  .u64 __cudaparm__Z12lud_internalPfii_m ,
	.param  .s32 __cudaparm__Z12lud_internalPfii_matrix_dim ,
	.param  .s32 __cudaparm__Z12lud_internalPfii_offset )
{
	.reg .u32 $r<8>;
	.reg .u32 $ofs<4>;

	.reg .u32 $r124;

	
	mov.u32 $r2, $r0;
	and.u16 $r1.lo, $r2.hi, constant1_Z12lud_internalPfii[0x0000];
	mov.u32 $r0, s[0x001c];
	cvt.u32.u16 $r5, $r1.lo;
	mov.u32 $r1, s[0x0018];
	mad.wide.u16 $r3, %ctaid.y, constant1_Z12lud_internalPfii[0x0004], $r0;
	add.u32 $r6, s[0x001c], $r5;
	add.half.u32 $r4, $r5, $r3;
	mul.half.lo.u16 $r3, $r1.lo, $r6.hi;
	add.u32 $r4, $r4, 0x00000010;
	mad.wide.u16 $r3, $r1.hi, $r6.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mul.wide.u16 $r7, $r1.lo, $r4.hi;
	mad.wide.u16 $r6, $r1.lo, $r6.lo, $r3;
	mad.wide.u16 $r7, $r1.hi, $r4.lo, $r7;
	mad.lo.u16 $r0, %ctaid.x, 0x00000010, $r0;
	cvt.u32.u16 $r3, $r2.lo;
	shl.u32 $r7, $r7, 0x00000010;
	add.u32 $r2, $r0, $r6;
	mad.wide.u16 $r4, $r1.lo, $r4.lo, $r7;
	add.half.u32 $r1, $r3, $r2;
	add.half.u32 $r6, s[0x001c], $r4;
	shl.u32 $r2, $r1, 0x00000002;
	shl.u32 $r1, $r5, 0x00000004;
	add.half.u32 $r6, $r3, $r6;
	add.half.u32 $r2, s[0x0010], $r2;
	add.u32 $r1, $r3, $r1;
	shl.u32 $r6, $r6, 0x00000002;
	add.u32 $r2, $r2, 0x00000040;
	shl.b32 $ofs1, $r5, 0x00000006;
	shl.b32 $ofs2, $r1, 0x00000002;
	add.u32 $r1, s[0x0010], $r6;
	ld.global.u32 $r2, [$r2];
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs2+0x0420], $r2;
	mov.u32 s[$ofs2+0x0020], $r1;
	bar.sync 0x00000000;
	shl.b32 $ofs2, $r3, 0x00000002;
	mov.u32 $r2, s[$ofs1+0x0020];
	add.u32 $ofs3, $ofs2, 0x00000420;
	mov.u32 $r1, s[$ofs1+0x0024];
	mad.f32 $r2, s[$ofs3+0x0000], $r2, $r124;
	mad.f32 $r2, s[$ofs3+0x0040], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0028];
	add.u32 $ofs3, $ofs2, 0x000004a0;
	mad.f32 $r2, s[$ofs3+0x0000], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x002c];
	mad.f32 $r2, s[$ofs3+0x0040], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0030];
	add.u32 $ofs3, $ofs2, 0x00000520;
	mad.f32 $r2, s[$ofs3+0x0000], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0034];
	mad.f32 $r2, s[$ofs3+0x0040], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0038];
	add.u32 $ofs3, $ofs2, 0x000005a0;
	mad.f32 $r2, s[$ofs3+0x0000], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x003c];
	mad.f32 $r2, s[$ofs3+0x0040], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.u32 $ofs3, $ofs2, 0x00000620;
	mad.f32 $r2, s[$ofs3+0x0000], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0044];
	mad.f32 $r2, s[$ofs3+0x0040], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0048];
	add.u32 $ofs3, $ofs2, 0x000006a0;
	mad.f32 $r2, s[$ofs3+0x0000], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x004c];
	mad.f32 $r5, s[$ofs3+0x0040], $r1, $r2;
	mov.u32 $r1, s[$ofs1+0x0050];
	add.u32 $ofs3, $ofs2, 0x00000720;
	add.u32 $r2, $r0, $r4;
	mad.f32 $r4, s[$ofs3+0x0000], $r1, $r5;
	mov.u32 $r0, s[$ofs1+0x0054];
	add.u32 $r1, $r2, $r3;
	mad.f32 $r2, s[$ofs3+0x0040], $r0, $r4;
	shl.u32 $r1, $r1, 0x00000002;
	mov.u32 $r0, s[$ofs1+0x0058];
	add.u32 $ofs2, $ofs2, 0x000007a0;
	add.u32 $r1, s[0x0010], $r1;
	mad.f32 $r2, s[$ofs2+0x0000], $r0, $r2;
	mov.u32 $r0, s[$ofs1+0x005c];
	add.u32 $r1, $r1, 0x00000040;
	mad.f32 $r2, s[$ofs2+0x0040], $r0, $r2;
	ld.global.u32 $r0, [$r1];
	add.f32 $r0, $r0, -$r2;
	st.global.u32 [$r1], $r0;

	l_exit: exit;
}

.entry  _Z13lud_perimeterPfii (
	.param  .u64 __cudaparm__Z13lud_perimeterPfii_m ,
	.param  .s32 __cudaparm__Z13lud_perimeterPfii_matrix_dim ,
	.param  .s32 __cudaparm__Z13lud_perimeterPfii_offset )
{
	.reg .u32 $r<16>;
	.reg .u32 $ofs<5>;
	.reg .pred $p<4>;

	.reg .u32 $r124;

	.reg .u32 $o127;

	
	cvt.u32.u16 $r5, $r0.lo;
	set.le.u32.u32 $p1/$r1, $r5, constant1_Z13lud_perimeterPfii[0x0000];
	cvt.s32.s32 $p0|$o127, $r1;
	ssy 0x000009a8;
	mul.wide.u16 $r4, %ctaid.x, 0x00000010;
	@$p1.eq bra l0x000004d0;
	mov.half.u32 $r1, s[0x0018];
	mov.half.u32 $r2, s[0x001c];
	mul.wide.u16 $r3, $r1.lo, $r2.hi;
	mad.wide.u16 $r3, $r1.hi, $r2.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r1, $r1.lo, $r2.lo, $r3;
	add.u32 $r2, s[0x001c], $r1;
	add.u32 $r3, s[0x0018], $r2;
	cvt.u32.u16 $r1, $r0.lo;
	add.u32 $r6, s[0x0018], $r3;
	shl.b32 $ofs1, $r1, 0x00000002;
	add.half.u32 $r7, s[0x0018], $r6;
	add.half.u32 $r8, $r1, $r2;
	add.half.u32 $r10, $r1, $r3;
	add.half.u32 $r12, $r1, $r6;
	add.u32 $r13, $r1, $r7;
	shl.u32 $r9, $r8, 0x00000002;
	shl.u32 $r11, $r10, 0x00000002;
	shl.u32 $r10, $r12, 0x00000002;
	shl.u32 $r8, $r13, 0x00000002;
	add.u32 $r9, s[0x0010], $r9;
	ld.global.u32 $r9, [$r9];
	add.u32 $r11, s[0x0010], $r11;
	ld.global.u32 $r11, [$r11];
	add.u32 $r10, s[0x0010], $r10;
	ld.global.u32 $r12, [$r10];
	add.u32 $r8, s[0x0010], $r8;
	ld.global.u32 $r10, [$r8];
	mov.u32 s[$ofs1+0x0420], $r9;
	add.u32 $r8, s[0x0018], $r7;
	mov.u32 s[$ofs1+0x0460], $r11;
	add.u32 $r9, s[0x0018], $r8;
	mov.u32 s[$ofs1+0x04a0], $r12;
	add.u32 $r11, s[0x0018], $r9;
	mov.u32 s[$ofs1+0x04e0], $r10;
	add.half.u32 $r13, s[0x0018], $r11;
	add.half.u32 $r15, $r1, $r8;
	add.half.u32 $r10, $r1, $r9;
	add.half.u32 $r12, $r1, $r11;
	add.u32 $r14, $r1, $r13;
	shl.u32 $r15, $r15, 0x00000002;
	shl.u32 $r10, $r10, 0x00000002;
	shl.u32 $r12, $r12, 0x00000002;
	shl.u32 $r14, $r14, 0x00000002;
	add.u32 $r15, s[0x0010], $r15;
	ld.global.u32 $r15, [$r15];
	add.u32 $r10, s[0x0010], $r10;
	ld.global.u32 $r10, [$r10];
	add.u32 $r12, s[0x0010], $r12;
	ld.global.u32 $r12, [$r12];
	add.u32 $r14, s[0x0010], $r14;
	ld.global.u32 $r14, [$r14];
	mov.u32 s[$ofs1+0x0520], $r15;
	mov.u32 s[$ofs1+0x0560], $r10;
	mov.u32 s[$ofs1+0x05a0], $r12;
	mov.u32 s[$ofs1+0x05e0], $r14;
	add.half.u32 $r2, $r2, $r4;
	add.half.u32 $r3, $r3, $r4;
	add.half.u32 $r6, $r6, $r4;
	add.half.u32 $r10, $r7, $r4;
	add.half.u32 $r2, $r1, $r2;
	add.half.u32 $r3, $r1, $r3;
	add.half.u32 $r7, $r1, $r6;
	add.half.u32 $r12, $r1, $r10;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r6, $r3, 0x00000002;
	shl.u32 $r10, $r7, 0x00000002;
	shl.u32 $r12, $r12, 0x00000002;
	add.half.u32 $r3, s[0x0010], $r2;
	add.half.u32 $r7, s[0x0010], $r6;
	add.half.u32 $r6, s[0x0010], $r10;
	add.half.u32 $r2, s[0x0010], $r12;
	add.u32 $r3, $r3, 0x00000040;
	ld.global.u32 $r3, [$r3];
	add.u32 $r7, $r7, 0x00000040;
	ld.global.u32 $r7, [$r7];
	add.u32 $r6, $r6, 0x00000040;
	ld.global.u32 $r6, [$r6];
	add.u32 $r2, $r2, 0x00000040;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x0020], $r3;
	mov.u32 s[$ofs1+0x0060], $r7;
	mov.u32 s[$ofs1+0x00a0], $r6;
	mov.u32 s[$ofs1+0x00e0], $r2;
	add.half.u32 $r2, $r8, $r4;
	add.half.u32 $r3, $r9, $r4;
	add.half.u32 $r6, $r11, $r4;
	add.half.u32 $r7, $r13, $r4;
	add.half.u32 $r2, $r1, $r2;
	add.half.u32 $r3, $r1, $r3;
	add.half.u32 $r6, $r1, $r6;
	add.half.u32 $r7, $r1, $r7;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r7, $r7, 0x00000002;
	add.half.u32 $r2, s[0x0010], $r2;
	add.half.u32 $r3, s[0x0010], $r3;
	add.half.u32 $r8, s[0x0010], $r6;
	add.half.u32 $r9, s[0x0010], $r7;
	add.u32 $r2, $r2, 0x00000040;
	ld.global.u32 $r7, [$r2];
	add.u32 $r2, $r3, 0x00000040;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, $r8, 0x00000040;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, $r9, 0x00000040;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x0120], $r7;
	add.u32 $r7, s[0x0018], $r13;
	mov.u32 s[$ofs1+0x0160], $r6;
	add.u32 $r6, s[0x0018], $r7;
	mov.u32 s[$ofs1+0x01a0], $r3;
	add.u32 $r8, s[0x0018], $r6;
	mov.u32 s[$ofs1+0x01e0], $r2;
	add.half.u32 $r2, s[0x0018], $r8;
	add.half.u32 $r3, $r4, $r7;
	add.half.u32 $r6, $r4, $r6;
	add.half.u32 $r7, $r4, $r8;
	add.half.u32 $r8, $r4, $r2;
	add.half.u32 $r3, $r1, $r3;
	add.half.u32 $r6, $r1, $r6;
	add.half.u32 $r7, $r1, $r7;
	add.u32 $r8, $r1, $r8;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r7, $r7, 0x00000002;
	shl.u32 $r8, $r8, 0x00000002;
	add.half.u32 $r3, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0010], $r6;
	add.half.u32 $r9, s[0x0010], $r7;
	add.half.u32 $r10, s[0x0010], $r8;
	add.u32 $r3, $r3, 0x00000040;
	ld.global.u32 $r8, [$r3];
	add.u32 $r3, $r6, 0x00000040;
	ld.global.u32 $r7, [$r3];
	add.u32 $r3, $r9, 0x00000040;
	ld.global.u32 $r6, [$r3];
	add.u32 $r3, $r10, 0x00000040;
	ld.global.u32 $r3, [$r3];
	mov.u32 s[$ofs1+0x0220], $r8;
	add.u32 $r2, s[0x0018], $r2;
	mov.u32 s[$ofs1+0x0260], $r7;
	add.u32 $r7, s[0x0018], $r2;
	mov.u32 s[$ofs1+0x02a0], $r6;
	add.u32 $r6, s[0x0018], $r7;
	mov.u32 s[$ofs1+0x02e0], $r3;
	add.half.u32 $r8, s[0x0018], $r6;
	add.half.u32 $r2, $r4, $r2;
	add.half.u32 $r3, $r4, $r7;
	add.half.u32 $r6, $r4, $r6;
	add.half.u32 $r7, $r4, $r8;
	add.half.u32 $r2, $r1, $r2;
	add.half.u32 $r3, $r1, $r3;
	add.half.u32 $r6, $r1, $r6;
	add.u32 $r7, $r1, $r7;
	shl.u32 $r1, $r2, 0x00000002;
	shl.u32 $r2, $r3, 0x00000002;
	shl.u32 $r3, $r6, 0x00000002;
	shl.u32 $r6, $r7, 0x00000002;
	add.half.u32 $r1, s[0x0010], $r1;
	add.half.u32 $r2, s[0x0010], $r2;
	add.half.u32 $r7, s[0x0010], $r3;
	add.half.u32 $r8, s[0x0010], $r6;
	add.u32 $r1, $r1, 0x00000040;
	ld.global.u32 $r6, [$r1];
	add.u32 $r1, $r2, 0x00000040;
	ld.global.u32 $r3, [$r1];
	add.u32 $r1, $r7, 0x00000040;
	ld.global.u32 $r2, [$r1];
	add.u32 $r1, $r8, 0x00000040;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs1+0x0320], $r6;
	mov.u32 s[$ofs1+0x0360], $r3;
	mov.u32 s[$ofs1+0x03a0], $r2;
	mov.u32 s[$ofs1+0x03e0], $r1;
	bra l0x000009a8;
	l0x000004d0: add.u32 $r2, s[0x001c], 0x00000008;
	mov.u32 $r1, s[0x0018];
	mul.wide.u16 $r3, $r2.lo, $r1.hi;
	mad.wide.u16 $r3, $r2.hi, $r1.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r1, $r2.lo, $r1.lo, $r3;
	add.half.u32 $r2, s[0x001c], $r1;
	add.half.u32 $r3, s[0x0018], $r2;
	add.u32 $r6, s[0x0018], $r3;
	shl.b32 $ofs1, $r5, 0x00000002;
	add.half.u32 $r1, s[0x0018], $r6;
	add.half.u32 $r2, $r5, $r2;
	add.half.u32 $r3, $r5, $r3;
	add.half.u32 $r6, $r5, $r6;
	add.u32 $r7, $r5, $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r7, $r7, 0x00000002;
	add.half.u32 $r2, s[0x0010], $r2;
	add.half.u32 $r3, s[0x0010], $r3;
	add.half.u32 $r8, s[0x0010], $r6;
	add.half.u32 $r9, s[0x0010], $r7;
	add.u32 $r2, $r2, 0xffffffc0;
	ld.global.u32 $r7, [$r2];
	add.u32 $r2, $r3, 0xffffffc0;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, $r8, 0xffffffc0;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, $r9, 0xffffffc0;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x05e0], $r7;
	mov.u32 s[$ofs1+0x0620], $r6;
	add.u32 $r6, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0660], $r3;
	add.half.u32 $r7, s[0x0018], $r6;
	add.half.u32 $r3, s[0x001c], $r4;
	mov.u32 s[$ofs1+0x06a0], $r2;
	mov.half.u32 $r1, s[0x0018];
	add.half.u32 $r8, s[0x0018], $r7;
	add.u32 $r2, $r3, 0x00000010;
	add.half.u32 $r9, s[0x0018], $r8;
	add.half.u32 $r3, $r5, $r6;
	add.half.u32 $r6, $r5, $r7;
	add.half.u32 $r7, $r5, $r8;
	add.u32 $r8, $r5, $r9;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r7, $r7, 0x00000002;
	shl.u32 $r8, $r8, 0x00000002;
	add.half.u32 $r3, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0010], $r6;
	add.half.u32 $r7, s[0x0010], $r7;
	add.half.u32 $r8, s[0x0010], $r8;
	add.u32 $r3, $r3, 0xffffffc0;
	ld.global.u32 $r3, [$r3];
	add.u32 $r6, $r6, 0xffffffc0;
	ld.global.u32 $r6, [$r6];
	add.u32 $r7, $r7, 0xffffffc0;
	ld.global.u32 $r7, [$r7];
	add.u32 $r8, $r8, 0xffffffc0;
	ld.global.u32 $r8, [$r8];
	mul.wide.u16 $r9, $r1.lo, $r2.hi;
	mad.wide.u16 $r9, $r1.hi, $r2.lo, $r9;
	shl.u32 $r9, $r9, 0x00000010;
	mad.wide.u16 $r1, $r1.lo, $r2.lo, $r9;
	mov.u32 s[$ofs1+0x06e0], $r3;
	add.u32 $r2, s[0x001c], $r1;
	mov.u32 s[$ofs1+0x0720], $r6;
	add.u32 $r3, s[0x0018], $r2;
	mov.u32 s[$ofs1+0x0760], $r7;
	add.u32 $r6, s[0x0018], $r3;
	mov.u32 s[$ofs1+0x07a0], $r8;
	add.half.u32 $r1, s[0x0018], $r6;
	add.half.u32 $r2, $r5, $r2;
	add.half.u32 $r3, $r5, $r3;
	add.half.u32 $r6, $r5, $r6;
	add.u32 $r7, $r5, $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r7, $r7, 0x00000002;
	add.half.u32 $r2, s[0x0010], $r2;
	add.half.u32 $r3, s[0x0010], $r3;
	add.half.u32 $r8, s[0x0010], $r6;
	add.half.u32 $r9, s[0x0010], $r7;
	add.u32 $r2, $r2, 0xffffffc0;
	ld.global.u32 $r7, [$r2];
	add.u32 $r2, $r3, 0xffffffc0;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, $r8, 0xffffffc0;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, $r9, 0xffffffc0;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x07e0], $r7;
	add.u32 $r7, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0820], $r6;
	add.u32 $r6, s[0x0018], $r7;
	mov.u32 s[$ofs1+0x0860], $r3;
	add.u32 $r8, s[0x0018], $r6;
	mov.u32 s[$ofs1+0x08a0], $r2;
	add.half.u32 $r1, s[0x0018], $r8;
	add.half.u32 $r2, $r5, $r7;
	add.half.u32 $r3, $r5, $r6;
	add.half.u32 $r6, $r5, $r8;
	add.u32 $r7, $r5, $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r7, $r7, 0x00000002;
	add.half.u32 $r2, s[0x0010], $r2;
	add.half.u32 $r3, s[0x0010], $r3;
	add.half.u32 $r8, s[0x0010], $r6;
	add.half.u32 $r9, s[0x0010], $r7;
	add.u32 $r2, $r2, 0xffffffc0;
	ld.global.u32 $r7, [$r2];
	add.u32 $r2, $r3, 0xffffffc0;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, $r8, 0xffffffc0;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, $r9, 0xffffffc0;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x08e0], $r7;
	add.u32 $r7, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0920], $r6;
	add.u32 $r6, s[0x0018], $r7;
	mov.u32 s[$ofs1+0x0960], $r3;
	add.u32 $r8, s[0x0018], $r6;
	mov.u32 s[$ofs1+0x09a0], $r2;
	add.half.u32 $r1, s[0x0018], $r8;
	add.half.u32 $r2, $r5, $r7;
	add.half.u32 $r3, $r5, $r6;
	add.half.u32 $r6, $r5, $r8;
	add.u32 $r7, $r5, $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r7, $r7, 0x00000002;
	add.half.u32 $r2, s[0x0010], $r2;
	add.half.u32 $r3, s[0x0010], $r3;
	add.half.u32 $r8, s[0x0010], $r6;
	add.half.u32 $r9, s[0x0010], $r7;
	add.u32 $r2, $r2, 0xffffffc0;
	ld.global.u32 $r7, [$r2];
	add.u32 $r2, $r3, 0xffffffc0;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, $r8, 0xffffffc0;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, $r9, 0xffffffc0;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x09e0], $r7;
	add.u32 $r1, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0a20], $r6;
	add.u32 $r6, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0a60], $r3;
	add.u32 $r3, s[0x0018], $r6;
	mov.u32 s[$ofs1+0x0aa0], $r2;
	add.half.u32 $r7, s[0x0018], $r3;
	add.half.u32 $r1, $r5, $r1;
	add.half.u32 $r2, $r5, $r6;
	add.half.u32 $r3, $r5, $r3;
	add.u32 $r6, $r5, $r7;
	shl.u32 $r1, $r1, 0x00000002;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r6, $r6, 0x00000002;
	add.half.u32 $r1, s[0x0010], $r1;
	add.half.u32 $r2, s[0x0010], $r2;
	add.half.u32 $r7, s[0x0010], $r3;
	add.half.u32 $r8, s[0x0010], $r6;
	add.u32 $r1, $r1, 0xffffffc0;
	ld.global.u32 $r6, [$r1];
	add.u32 $r1, $r2, 0xffffffc0;
	ld.global.u32 $r3, [$r1];
	add.u32 $r1, $r7, 0xffffffc0;
	ld.global.u32 $r2, [$r1];
	add.u32 $r1, $r8, 0xffffffc0;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs1+0x0ae0], $r6;
	mov.u32 s[$ofs1+0x0b20], $r3;
	mov.u32 s[$ofs1+0x0b60], $r2;
	mov.u32 s[$ofs1+0x0ba0], $r1;
	l0x000009a8: nop;
	bar.sync 0x00000000;
	ssy 0x00000c30;
	@$p0.eq bra l0x00000a88;
	mov.u32 $r3, 0x00000001;
	l0x000009d0: set.le.s32.s32 $p1/$o127, $r3, $r124;
	@$p1.ne bra l0x00000a68;
	shl.u32 $r2, $r3, 0x00000004;
	cvt.u32.u16 $r1, $r0.lo;
	shl.u32 $r6, $r3, 0x00000006;
	add.u32 $r7, $r1, $r2;
	add.u32 $r1, $r1, 0x00000008;
	add.u32 $r2, $r6, 0x00000420;
	shl.b32 $ofs1, $r7, 0x00000002;
	shl.b32 $ofs2, $r1, 0x00000002;
	shl.b32 $ofs3, $r2, 0x0;
	mov.u32 $r6, $r124;
	mov.u32 $r1, s[$ofs1+0x0020];
	l0x00000a38: mov.u32 $r2, s[$ofs2+=0x0040];
	add.u32 $r6, $r6, 0x00000001;
	mad.f32 $r1, -s[$ofs3+=0x0004], $r2, $r1;
	set.ne.s32.s32 $p1/$o127, $r6, $r3;
	mov.u32 s[$ofs1+0x0020], $r1;
	@$p1.ne bra l0x00000a38;
	l0x00000a68: add.u32 $r3, $r3, 0x00000001;
	set.ne.s32.s32 $p1/$o127, $r3, constant1_Z13lud_perimeterPfii[0x0004];
	@$p1.ne bra l0x000009d0;
	bra l0x00000c30;
	l0x00000a88: mov.u32 $r1, 0x00000420;
	shl.b32 $ofs1, $r1, 0x0;
	mov.u32 $r8, $ofs1;
	mov.u32 $r2, $r124;
	shl.u32 $r6, $r5, 0x00000004;
	mov.u32 $r7, $r124;
	l0x00000ab8: set.le.s32.s32 $p1/$o127, $r7, $r124;
	@$p1.ne bra l0x00000b98;
	add.u32 $r3, $r2, $r6;
	shl.b32 $ofs1, $r3, 0x00000002;
	add.u32 $r1, $r2, 0x00000108;
	add.u32 $r9, $r3, 0x00000208;
	add.u32 $r3, $r6, 0x00000208;
	add.u32 $ofs4, $ofs1, 0x00000420;
	shl.b32 $ofs1, $r1, 0x00000002;
	shl.b32 $ofs3, $r9, 0x00000002;
	shl.b32 $ofs2, $r3, 0x00000002;
	mov.u32 $r1, s[$ofs4+0x0000];
	mov.u32 $r9, $r124;
	l0x00000b20: mov.u32 $r3, $ofs2;
	add.u32 $r3, $r3, 0xfffffc00;
	shl.b32 $ofs4, $r3, 0x0;
	mov.u32 $r3, s[$ofs4+0x0000];
	mov.u32 $r10, $ofs3;
	add.u32 $r10, $r10, 0xfffffc00;
	mad.f32 $r1, -s[$ofs1+0x0000], $r3, $r1;
	shl.b32 $ofs4, $r10, 0x0;
	mov.u32 s[$ofs4+0x0000], $r1;
	add.u32 $r9, $r9, 0x00000001;
	set.ne.s32.s32 $p1/$o127, $r9, $r7;
	add.u32 $ofs2, $ofs2, 0x00000004;
	add.u32 $ofs1, $ofs1, 0x00000040;
	@$p1.ne bra l0x00000b20;
	bra l0x00000bc8;
	l0x00000b98: add.u32 $r1, $r2, $r6;
	shl.b32 $ofs1, $r1, 0x00000002;
	add.u32 $r1, $r1, 0x00000208;
	add.u32 $ofs1, $ofs1, 0x00000420;
	shl.b32 $ofs3, $r1, 0x00000002;
	mov.u32 $r1, s[$ofs1+0x0000];
	l0x00000bc8: shl.b32 $ofs1, $r8, 0x0;
	mov.u32 $r3, s[$ofs1+=0x0044];
	mov.u32 $r8, $ofs3;
	rcp.f32 $r3, $r3;
	add.u32 $r8, $r8, 0xfffffc00;
	mul.f32 $r1, $r1, $r3;
	add.u32 $r7, $r7, 0x00000001;
	shl.b32 $ofs2, $r8, 0x0;
	set.ne.s32.s32 $p1/$o127, $r7, constant1_Z13lud_perimeterPfii[0x0004];
	mov.u32 s[$ofs2+0x0000], $r1;
	add.u32 $r2, $r2, 0x00000001;
	mov.u32 $r8, $ofs1;
	@$p1.ne bra l0x00000ab8;
	l0x00000c30: nop;
	bar.sync 0x00000000;
	@$p0.eq bra l0x00000fe0;
	add.u32 $r2, s[0x001c], 0x00000001;
	mov.u32 $r1, s[0x0018];
	mul.wide.u16 $r3, $r2.lo, $r1.hi;
	mad.wide.u16 $r3, $r2.hi, $r1.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r1, $r2.lo, $r1.lo, $r3;
	add.u32 $r2, s[0x001c], $r1;
	cvt.u32.u16 $r1, $r0.lo;
	add.half.u32 $r0, $r2, $r4;
	add.half.u32 $r0, $r1, $r0;
	add.u32 $r3, s[0x0018], $r2;
	shl.u32 $r0, $r0, 0x00000002;
	shl.b32 $ofs1, $r1, 0x00000002;
	add.half.u32 $r5, $r4, $r3;
	add.half.u32 $r2, s[0x0010], $r0;
	mov.u32 $r0, s[$ofs1+0x0060];
	add.half.u32 $r5, $r1, $r5;
	add.half.u32 $r6, s[0x0018], $r3;
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r5, 0x00000002;
	add.u32 $r5, $r4, $r6;
	st.global.u32 [$r2], $r0;
	add.u32 $ofs2, $ofs1, 0x000000a0;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r3, $r1, $r5;
	add.half.u32 $r5, s[0x0018], $r6;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r6, $r4, $r5;
	st.global.u32 [$r2], $r0;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r3, $r1, $r6;
	add.u32 $r5, s[0x0018], $r5;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r6, $r4, $r5;
	add.u32 $ofs2, $ofs1, 0x00000120;
	st.global.u32 [$r2], $r0;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r3, $r1, $r6;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r5, s[0x0018], $r5;
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r6, $r4, $r5;
	st.global.u32 [$r2], $r0;
	add.u32 $r2, s[0x0010], $r3;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.half.u32 $r3, $r1, $r6;
	add.half.u32 $r5, s[0x0018], $r5;
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r6, $r4, $r5;
	st.global.u32 [$r2], $r0;
	add.u32 $ofs2, $ofs1, 0x000001a0;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r3, $r1, $r6;
	add.half.u32 $r5, s[0x0018], $r5;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r6, $r4, $r5;
	st.global.u32 [$r2], $r0;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r3, $r1, $r6;
	add.u32 $r5, s[0x0018], $r5;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r6, $r4, $r5;
	add.u32 $ofs2, $ofs1, 0x00000220;
	st.global.u32 [$r2], $r0;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r3, $r1, $r6;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r5, s[0x0018], $r5;
	add.u32 $r2, $r2, 0x00000040;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r6, $r4, $r5;
	st.global.u32 [$r2], $r0;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r5, s[0x0018], $r5;
	add.u32 $r3, $r1, $r6;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r2, $r2, 0x00000040;
	add.u32 $r6, $r4, $r5;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $ofs2, $ofs1, 0x000002a0;
	st.global.u32 [$r2], $r0;
	add.half.u32 $r6, $r1, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r5, s[0x0018], $r5;
	shl.u32 $r3, $r6, 0x00000002;
	add.u32 $r2, $r2, 0x00000040;
	add.half.u32 $r6, $r4, $r5;
	add.half.u32 $r3, s[0x0010], $r3;
	st.global.u32 [$r2], $r0;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r6, $r1, $r6;
	add.u32 $r2, $r3, 0x00000040;
	add.u32 $r5, s[0x0018], $r5;
	shl.u32 $r3, $r6, 0x00000002;
	st.global.u32 [$r2], $r0;
	add.u32 $r0, $r4, $r5;
	add.u32 $ofs2, $ofs1, 0x00000320;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r5, s[0x0018], $r5;
	add.half.u32 $r3, $r1, $r0;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.u32 $r2, $r2, 0x00000040;
	add.u32 $r6, $r4, $r5;
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r7, s[0x0018], $r5;
	st.global.u32 [$r2], $r0;
	add.half.u32 $r5, $r1, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.u32 $r4, $r4, $r7;
	mov.u32 $r0, s[$ofs2+0x0040];
	shl.u32 $r3, $r5, 0x00000002;
	add.u32 $r2, $r2, 0x00000040;
	add.u32 $r4, $r1, $r4;
	add.u32 $ofs1, $ofs1, 0x000003a0;
	add.u32 $r1, s[0x0010], $r3;
	st.global.u32 [$r2], $r0;
	shl.u32 $r2, $r4, 0x00000002;
	mov.u32 $r0, s[$ofs1+0x0000];
	add.u32 $r1, $r1, 0x00000040;
	add.u32 $r2, s[0x0010], $r2;
	st.global.u32 [$r1], $r0;
	mov.u32 $r0, s[$ofs1+0x0040];
	add.u32 $r1, $r2, 0x00000040;
	st.global.u32 [$r1], $r0;
	retp;
	l0x00000fe0: add.half.u32 $r1, s[0x001c], $r4;
	mov.half.u32 $r0, s[0x0018];
	add.u32 $r1, $r1, 0x00000010;
	mul.wide.u16 $r2, $r0.lo, $r1.hi;
	mad.wide.u16 $r2, $r0.hi, $r1.lo, $r2;
	shl.u32 $r2, $r2, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r1.lo, $r2;
	add.half.u32 $r0, s[0x001c], $r0;
	add.half.u32 $r1, $r0, $r5;
	shl.b32 $ofs1, $r5, 0x00000002;
	shl.u32 $r1, $r1, 0x00000002;
	add.u32 $r2, s[0x0018], $r0;
	add.u32 $ofs2, $ofs1, 0x000007e0;
	add.half.u32 $r1, s[0x0010], $r1;
	add.half.u32 $r3, $r5, $r2;
	mov.u32 $r0, s[$ofs2+0x0000];
	add.u32 $r1, $r1, 0xffffffc0;
	add.u32 $r4, s[0x0018], $r2;
	shl.u32 $r2, $r3, 0x00000002;
	st.global.u32 [$r1], $r0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r1, s[0x0010], $r2;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	add.u32 $r1, $r1, 0xffffffc0;
	add.u32 $ofs2, $ofs1, 0x00000860;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r2, s[0x0010], $r2;
	st.global.u32 [$r1], $r0;
	mov.u32 $r0, s[$ofs2+0x0000];
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r1, $r2, 0xffffffc0;
	add.half.u32 $r4, s[0x0018], $r4;
	add.half.u32 $r2, s[0x0010], $r3;
	st.global.u32 [$r1], $r0;
	add.u32 $r3, $r5, $r4;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r1, $r2, 0xffffffc0;
	add.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	add.u32 $ofs2, $ofs1, 0x000008e0;
	st.global.u32 [$r1], $r0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r1, s[0x0010], $r2;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	add.u32 $r1, $r1, 0xffffffc0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r2, s[0x0010], $r2;
	st.global.u32 [$r1], $r0;
	mov.u32 $r0, s[$ofs2+0x0040];
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r1, $r2, 0xffffffc0;
	add.u32 $r4, s[0x0018], $r4;
	add.u32 $ofs2, $ofs1, 0x00000960;
	add.u32 $r2, s[0x0010], $r3;
	st.global.u32 [$r1], $r0;
	add.half.u32 $r3, $r5, $r4;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.u32 $r1, $r2, 0xffffffc0;
	add.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	st.global.u32 [$r1], $r0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r1, s[0x0010], $r2;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	add.u32 $r1, $r1, 0xffffffc0;
	add.u32 $ofs2, $ofs1, 0x000009e0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r2, s[0x0010], $r2;
	st.global.u32 [$r1], $r0;
	mov.u32 $r0, s[$ofs2+0x0000];
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r1, $r2, 0xffffffc0;
	add.half.u32 $r4, s[0x0018], $r4;
	add.half.u32 $r2, s[0x0010], $r3;
	st.global.u32 [$r1], $r0;
	add.u32 $r3, $r5, $r4;
	mov.u32 $r0, s[$ofs2+0x0040];
	add.u32 $r1, $r2, 0xffffffc0;
	add.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	add.u32 $ofs2, $ofs1, 0x00000a60;
	st.global.u32 [$r1], $r0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r1, s[0x0010], $r2;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	add.u32 $r1, $r1, 0xffffffc0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r2, s[0x0010], $r2;
	st.global.u32 [$r1], $r0;
	mov.u32 $r0, s[$ofs2+0x0040];
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r1, $r2, 0xffffffc0;
	add.u32 $r4, s[0x0018], $r4;
	add.u32 $ofs2, $ofs1, 0x00000ae0;
	add.u32 $r2, s[0x0010], $r3;
	st.global.u32 [$r1], $r0;
	add.half.u32 $r3, $r5, $r4;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.u32 $r1, $r2, 0xffffffc0;
	add.u32 $r4, s[0x0018], $r4;
	shl.u32 $r2, $r3, 0x00000002;
	st.global.u32 [$r1], $r0;
	add.half.u32 $r3, $r5, $r4;
	add.half.u32 $r1, s[0x0010], $r2;
	add.u32 $r4, s[0x0018], $r4;
	mov.u32 $r0, s[$ofs2+0x0040];
	shl.u32 $r2, $r3, 0x00000002;
	add.u32 $r1, $r1, 0xffffffc0;
	add.u32 $r3, $r5, $r4;
	add.u32 $ofs1, $ofs1, 0x00000b60;
	add.u32 $r2, s[0x0010], $r2;
	st.global.u32 [$r1], $r0;
	shl.u32 $r3, $r3, 0x00000002;
	mov.u32 $r0, s[$ofs1+0x0000];
	add.u32 $r1, $r2, 0xffffffc0;
	add.u32 $r2, s[0x0010], $r3;
	st.global.u32 [$r1], $r0;
	mov.u32 $r0, s[$ofs1+0x0040];
	add.u32 $r1, $r2, 0xffffffc0;
	st.global.u32 [$r1], $r0;

	l_exit: exit;
}

.entry  _Z12lud_diagonalPfii (
	.param  .u64 __cudaparm__Z12lud_diagonalPfii_m ,
	.param  .s32 __cudaparm__Z12lud_diagonalPfii_matrix_dim ,
	.param  .s32 __cudaparm__Z12lud_diagonalPfii_offset )
{
	.reg .u32 $r<9>;
	.reg .u32 $ofs<5>;
	.reg .pred $p<4>;

	.reg .u32 $r124;

	.reg .u32 $o127;

	
	mov.half.u32 $r1, s[0x001c];
	mov.half.u32 $r2, s[0x0018];
	mul.wide.u16 $r3, $r1.lo, $r2.hi;
	mad.wide.u16 $r3, $r1.hi, $r2.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r1, $r1.lo, $r2.lo, $r3;
	add.u32 $r2, s[0x001c], $r1;
	cvt.u32.u16 $r0, $r0.lo;
	add.u32 $r3, s[0x0018], $r2;
	add.u32 $r5, $r0, 0x00000008;
	add.u32 $r4, s[0x0018], $r3;
	shl.b32 $ofs1, $r0, 0x00000002;
	add.half.u32 $r1, s[0x0018], $r4;
	add.half.u32 $r2, $r0, $r2;
	add.half.u32 $r3, $r0, $r3;
	add.half.u32 $r4, $r0, $r4;
	add.u32 $r6, $r0, $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r7, $r4, 0x00000002;
	shl.u32 $r8, $r6, 0x00000002;
	add.u32 $r2, s[0x0010], $r2;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, s[0x0010], $r3;
	ld.global.u32 $r4, [$r2];
	add.u32 $r2, s[0x0010], $r7;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, s[0x0010], $r8;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x0020], $r6;
	add.u32 $r6, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0060], $r4;
	add.u32 $r4, s[0x0018], $r6;
	mov.u32 s[$ofs1+0x00a0], $r3;
	add.u32 $r7, s[0x0018], $r4;
	mov.u32 s[$ofs1+0x00e0], $r2;
	add.half.u32 $r1, s[0x0018], $r7;
	add.half.u32 $r2, $r0, $r6;
	add.half.u32 $r3, $r0, $r4;
	add.half.u32 $r4, $r0, $r7;
	add.u32 $r6, $r0, $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r7, $r4, 0x00000002;
	shl.u32 $r8, $r6, 0x00000002;
	add.u32 $r2, s[0x0010], $r2;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, s[0x0010], $r3;
	ld.global.u32 $r4, [$r2];
	add.u32 $r2, s[0x0010], $r7;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, s[0x0010], $r8;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x0120], $r6;
	add.u32 $r6, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0160], $r4;
	add.u32 $r4, s[0x0018], $r6;
	mov.u32 s[$ofs1+0x01a0], $r3;
	add.u32 $r7, s[0x0018], $r4;
	mov.u32 s[$ofs1+0x01e0], $r2;
	add.half.u32 $r1, s[0x0018], $r7;
	add.half.u32 $r2, $r0, $r6;
	add.half.u32 $r3, $r0, $r4;
	add.half.u32 $r4, $r0, $r7;
	add.u32 $r6, $r0, $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r3, $r3, 0x00000002;
	shl.u32 $r7, $r4, 0x00000002;
	shl.u32 $r8, $r6, 0x00000002;
	add.u32 $r2, s[0x0010], $r2;
	ld.global.u32 $r6, [$r2];
	add.u32 $r2, s[0x0010], $r3;
	ld.global.u32 $r4, [$r2];
	add.u32 $r2, s[0x0010], $r7;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, s[0x0010], $r8;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x0220], $r6;
	add.u32 $r1, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x0260], $r4;
	add.u32 $r4, s[0x0018], $r1;
	mov.u32 s[$ofs1+0x02a0], $r3;
	add.u32 $r3, s[0x0018], $r4;
	mov.u32 s[$ofs1+0x02e0], $r2;
	add.half.u32 $r6, s[0x0018], $r3;
	add.half.u32 $r1, $r0, $r1;
	add.half.u32 $r2, $r0, $r4;
	add.half.u32 $r3, $r0, $r3;
	add.u32 $r4, $r0, $r6;
	shl.u32 $r1, $r1, 0x00000002;
	shl.u32 $r2, $r2, 0x00000002;
	shl.u32 $r6, $r3, 0x00000002;
	shl.u32 $r7, $r4, 0x00000002;
	add.u32 $r1, s[0x0010], $r1;
	ld.global.u32 $r4, [$r1];
	add.u32 $r1, s[0x0010], $r2;
	ld.global.u32 $r3, [$r1];
	add.u32 $r1, s[0x0010], $r6;
	ld.global.u32 $r2, [$r1];
	add.u32 $r1, s[0x0010], $r7;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs1+0x0320], $r4;
	mov.u32 s[$ofs1+0x0360], $r3;
	mov.u32 s[$ofs1+0x03a0], $r2;
	mov.u32 s[$ofs1+0x03e0], $r1;
	bar.sync 0x00000000;
	mov.u32 $r1, $r124;
	l0x00000310: set.lt.u32.u32 $p1/$r2, $r1, $r0;
	cvt.s32.s32 $p0|$o127, $r2;
	ssy 0x00000440;
	@$p1.eq bra l0x00000440;
	set.le.s32.s32 $p1/$o127, $r1, $r124;
	@$p1.ne bra l0x000003e8;
	shl.u32 $r2, $r0, 0x00000004;
	add.u32 $r4, $r1, $r2;
	shl.u32 $r2, $r0, 0x00000006;
	add.u32 $r6, $r4, 0x00000008;
	add.u32 $r3, $r2, 0x00000020;
	add.u32 $r2, $r1, 0x00000008;
	shl.b32 $ofs3, $r6, 0x00000002;
	shl.b32 $ofs2, $r3, 0x0;
	shl.b32 $ofs1, $r2, 0x00000002;
	shl.b32 $ofs4, $r4, 0x00000002;
	mov.u32 $r3, s[$ofs4+0x0020];
	mov.u32 $r2, $r1;
	mov.u32 $r6, $r124;
	l0x000003a8: mov.u32 $r4, s[$ofs2+=0x0004];
	add.u32 $r6, $r6, 0x00000001;
	mad.f32 $r3, -s[$ofs1+0x0000], $r4, $r3;
	set.ne.s32.s32 $p1/$o127, $r6, $r1;
	add.u32 $ofs1, $ofs1, 0x00000040;
	mov.u32 s[$ofs3+0x0000], $r3;
	@$p1.ne bra l0x000003a8;
	bra l0x00000418;
	l0x000003e8: shl.u32 $r2, $r0, 0x00000004;
	add.u32 $r2, $r1, $r2;
	add.u32 $r3, $r2, 0x00000008;
	shl.b32 $ofs1, $r2, 0x00000002;
	shl.b32 $ofs3, $r3, 0x00000002;
	mov.half.u32 $r2, $r1;
	mov.half.u32 $r3, s[$ofs1+0x0020];
	l0x00000418: mul24.lo.u32 $r2, $r2, 0x00000044;
	shl.b32 $ofs1, $r2, 0x0;
	mov.half.u32 $r2, s[$ofs1+0x0020];
	rcp.half.f32 $r2, $r2;
	mul.f32 $r2, $r3, $r2;
	mov.u32 s[$ofs3+0x0000], $r2;
	l0x00000440: nop;
	bar.sync 0x00000000;
	ssy 0x00000500;
	@$p0.eq bra l0x00000500;
	add.u32 $r4, $r1, 0x00000001;
	set.le.s32.s32 $p0/$o127, $r4, $r124;
	@$p0.ne bra l0x00000500;
	shl.u32 $r2, $r1, 0x00000004;
	shl.u32 $r3, $r1, 0x00000006;
	add.u32 $r6, $r0, $r2;
	add.u32 $r2, $r3, 0x00000020;
	shl.b32 $ofs2, $r6, 0x00000002;
	shl.b32 $ofs3, $r2, 0x0;
	mov.u32 $r6, $r124;
	mov.u32 $r2, s[$ofs2+0x0060];
	shl.b32 $ofs1, $r5, 0x00000002;
	l0x000004c0: mov.u32 $r3, s[$ofs3+0x0040];
	add.u32 $r6, $r6, 0x00000001;
	mad.f32 $r2, -s[$ofs1+0x0000], $r3, $r2;
	set.ne.s32.s32 $p0/$o127, $r4, $r6;
	add.u32 $ofs3, $ofs3, 0x00000004;
	add.u32 $ofs1, $ofs1, 0x00000040;
	mov.u32 s[$ofs2+0x0060], $r2;
	@$p0.ne bra l0x000004c0;
	l0x00000500: nop;
	bar.sync 0x00000000;
	add.u32 $r1, $r1, 0x00000001;
	set.ne.s32.s32 $p0/$o127, $r1, constant1_Z12lud_diagonalPfii[0x0000];
	@$p0.ne bra l0x00000310;
	add.u32 $r2, s[0x001c], 0x00000001;
	mov.u32 $r1, s[0x0018];
	mul.wide.u16 $r3, $r2.lo, $r1.hi;
	mad.wide.u16 $r3, $r2.hi, $r1.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r1, $r2.lo, $r1.lo, $r3;
	add.half.u32 $r1, s[0x001c], $r1;
	add.half.u32 $r2, $r1, $r0;
	add.u32 $r3, s[0x0018], $r1;
	shl.u32 $r2, $r2, 0x00000002;
	shl.b32 $ofs1, $r5, 0x00000002;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.half.u32 $r4, $r0, $r3;
	add.half.u32 $r2, s[0x0010], $r2;
	add.u32 $ofs1, $ofs1, 0x00000080;
	add.u32 $r6, s[0x0018], $r3;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.half.u32 $r1, s[$ofs1+0x0000];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	shl.b32 $ofs1, $r5, 0x00000002;
	add.u32 $ofs1, $ofs1, 0x00000100;
	add.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.half.u32 $r1, s[$ofs1+0x0000];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	shl.b32 $ofs1, $r5, 0x00000002;
	add.u32 $ofs1, $ofs1, 0x00000180;
	add.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.half.u32 $r1, s[$ofs1+0x0000];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	shl.b32 $ofs1, $r5, 0x00000002;
	add.u32 $ofs1, $ofs1, 0x00000200;
	add.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.half.u32 $r1, s[$ofs1+0x0000];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	shl.b32 $ofs1, $r5, 0x00000002;
	add.u32 $ofs1, $ofs1, 0x00000280;
	add.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.half.u32 $r1, s[$ofs1+0x0000];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	shl.b32 $ofs1, $r5, 0x00000002;
	add.u32 $ofs1, $ofs1, 0x00000300;
	add.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.half.u32 $r1, s[$ofs1+0x0000];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.half.u32 $r6, s[0x0018], $r6;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	mov.u32 $r1, s[$ofs1+0x0040];
	add.half.u32 $r4, $r0, $r6;
	add.half.u32 $r2, s[0x0010], $r3;
	add.u32 $r6, s[0x0018], $r6;
	shl.b32 $ofs1, $r5, 0x00000002;
	add.u32 $ofs1, $ofs1, 0x00000380;
	shl.u32 $r3, $r4, 0x00000002;
	st.global.u32 [$r2], $r1;
	add.half.u32 $r2, $r0, $r6;
	mov.half.u32 $r0, s[$ofs1+0x0000];
	add.u32 $r1, s[0x0010], $r3;
	shl.u32 $r2, $r2, 0x00000002;
	st.global.u32 [$r1], $r0;
	mov.u32 $r0, s[$ofs1+0x0040];
	add.u32 $r1, s[0x0010], $r2;
	st.global.u32 [$r1], $r0;

	l_exit: exit;
}
//END INSTRUCTIONS
